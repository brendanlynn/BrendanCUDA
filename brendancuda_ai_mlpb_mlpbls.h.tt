#pragma once

#include <cuda_runtime.h>
#include <memory>
#include "brendancuda_rand_anyrng.h"
#include "brendancuda_ai.h"

namespace BrendanCUDA {
    namespace AI {
        namespace MLPB {
<# for (int i = 8; i <= 64; i <<= 1) { #>
<# for (int j = 8; j <= 64; j <<= 1) { #>
            class MLPBL<#= i #>T<#= j #> final {
            public:
                __host__ __device__ MLPBL<#= i #>T<#= j #>();
                __host__ MLPBL<#= i #>T<#= j #>(uint<#= i #>_t* Weights, uint<#= j #>_t* Bias, bool CopyFromHost);
                __device__ MLPBL<#= i #>T<#= j #>(uint<#= i #>_t* Weights, uint<#= j #>_t* Bias);
                __host__ __device__ MLPBL<#= i #>T<#= j #>(uint<#= i #>_t* Weights, uint<#= j #>_t Bias);
                __host__ __device__ void Dispose();
                __host__ __device__ uint<#= i #>_t* Weights() const;
                __host__ __device__ uint<#= i #>_t* Weight(size_t Index) const;
                __host__ __device__ uint<#= j #>_t* Bias() const;
                __host__ uint<#= i #>_t* GetWeights(bool CopyToHost) const;
                __device__ uint<#= i #>_t* GetWeights() const;
                __host__ void SetWeights(uint<#= i #>_t* Weights, bool CopyFromHost);
                __device__ void SetWeights(uint<#= i #>_t* Weights);
                __host__ __device__ uint<#= i #>_t GetWeight(size_t Index) const;
                __host__ __device__ void SetWeight(size_t Index, uint<#= i #>_t Weight);
                __host__ __device__ uint<#= j #>_t GetBias() const;
                __host__ __device__ void SetBias(uint<#= j #>_t Bias);
                __host__ __device__ uint<#= j #>_t Run(uint<#= i #>_t Input) const;
                __host__ __device__ uint64_t RunG(uint64_t Input) const;
                __host__ __device__ void CopyTo(MLPBL<#= i #>T<#= j #> Other) const;

                __host__ __device__ MLPBL<#= i #>T<#= j #> Clone() const;
                __host__ __device__ void RandomizeWFlips(uint32_t WeightsFlipProb, uint32_t BiasFlipProb, Random::AnyRNG<uint64_t> RNG);
                __host__ __device__ MLPBL<#= i #>T<#= j #> ReproduceWFlips(uint32_t WeightsFlipProb, uint32_t BiasFlipProb, Random::AnyRNG<uint64_t> RNG) const;
                __host__ __device__ void RandomizeWTargets(uint32_t WeightsEachFlipProb, uint32_t BiasFlipProb, Random::AnyRNG<uint64_t> RNG);
                __host__ __device__ MLPBL<#= i #>T<#= j #> ReproduceWTargets(uint32_t WeightsEachFlipProb, uint32_t BiasFlipProb, Random::AnyRNG<uint64_t> RNG) const;
                __host__ __device__ void RandomizeWMutations(uint32_t WeightsMutationProb, uint32_t WeightsProbOf1, uint32_t BiasMutationProb, uint32_t BiasProbOf1, Random::AnyRNG<uint64_t> RNG);
                __host__ __device__ MLPBL<#= i #>T<#= j #> ReproduceWMutations(uint32_t WeightsMutationProb, uint32_t WeightsProbOf1, uint32_t BiasMutationProb, uint32_t BiasProbOf1, Random::AnyRNG<uint64_t> RNG) const;
            private:
                uint<#= i #>_t* weights;
                uint<#= j #>_t* bias;
            };
<# } #>
<# } #>
        }
    }
}