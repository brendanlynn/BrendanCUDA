#include "brendancuda_fixedvectors.cuh"
#include "brendancuda_math.cuh"

<# string[] ts = {"float", "double", "int8", "uint8", "int16", "uint16", "int32", "uint32", "int64", "uint64"}; #>
<# for (int i = 0; i < 8; ++i) { #>
<# string t = ts[i]; #>
<# string tn = i >= 2 ? t + "_t" : t; #>
<# for (int j = 2; j <= 4; ++j) { #>
__host__ __device__ BrendanCUDA::<#= t #>_<#= j #>::<#= t #>_<#= j #>(<#= tn #> x, <#= tn #> y<# if (j > 2) { #>, <#= tn #> z<# if (j > 3) { #>, <#= tn #> w<# } } #>) {
    this->x = x;
    this->y = y;
<# if (j > 2) { #>
    this->z = z;
<# if (j > 3) { #>
    this->w = w;
<# } } #>
}
__host__ __device__ BrendanCUDA::<#= t #>_<#= j #>::<#= t #>_<#= j #>(<#= tn #> v[<#= j #>]) {
<# for (int k = 0; k < j; ++k) { #>
    this->v[<#= k #>] = v[<#= k #>];
<# } #>
}
__host__ __device__ BrendanCUDA::<#= t #>_<#= j #> BrendanCUDA::<#= t #>_<#= j #>::operator+(<#= t #>_<#= j #> other) {
    return <#= t #>_<#= j #>(x + other.x, y + other.y<# if (j > 2) { #>, z + other.z<# if (j > 3) { #>, w + other.w<# } } #>);
}
__host__ __device__ BrendanCUDA::<#= t #>_<#= j #> BrendanCUDA::<#= t #>_<#= j #>::operator-(<#= t #>_<#= j #> other) {
    return <#= t #>_<#= j #>(x - other.x, y - other.y<# if (j > 2) { #>, z - other.z<# if (j > 3) { #>, w - other.w<# } } #>);
}
__host__ __device__ BrendanCUDA::<#= t #>_<#= j #> BrendanCUDA::<#= t #>_<#= j #>::operator*(<#= tn #> other) {
    return <#= t #>_<#= j #>(x * other, y * other<# if (j > 2) { #>, z * other<# if (j > 3) { #>, w * other<# } } #>);
}
__host__ __device__ BrendanCUDA::<#= t #>_<#= j #> BrendanCUDA::<#= t #>_<#= j #>::operator/(<#= tn #> other) {
    return <#= t #>_<#= j #>(x / other, y / other<# if (j > 2) { #>, z / other<# if (j > 3) { #>, w / other<# } } #>);
}
__host__ __device__ <#= tn #> BrendanCUDA::<#= t #>_<#= j #>::Dot(<#= t #>_<#= j #> left, <#= t #>_<#= j #> right) {
    return left.x * right.x + left.y * right.y<# if (j > 2) { #> + left.z * right.z<# if (j > 3) { #> + left.w * right.w<# } } #>;
}
__host__ __device__ <#= tn #> BrendanCUDA::<#= t #>_<#= j #>::MagnatudeSquared() const {
    return x * x + y * y<# if (j > 2) { #> + z * z<# if (j > 3) { #> + w * w<# } } #>;
}
__host__ __device__ <#= tn #> BrendanCUDA::<#= t #>_<#= j #>::Magnatude() const {
    return Math::sqrt(MagnatudeSquared());
}
<# } #>
<# } #>